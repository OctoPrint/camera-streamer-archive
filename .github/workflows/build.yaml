name: "Build binary & package"

on:
  workflow_dispatch:
    inputs:
      build_branch:
        description: "camera-streamer branch to build"
        required: false
        default: 'master'
      octopi_version:
        description: "OctoPi version to build against (leave empty to use latest stable release)"
        required: false
        default: ''
      debian_revision:
        description: "Debian revision to use"
        required: false
        default: '1'

jobs:
  build:
    name: "Build"
    runs-on: ubuntu-latest

    outputs:
      camera-streamer-commit: ${{ steps.extract.outputs.camera-streamer-commit }}
      dependencies: ${{ steps.extract.outputs.dependencies }}

    steps:
    - name: "⬇ Checkout"
      uses: actions/checkout@v3

    - name: "🔎 Determine OctoPi version"
      uses: actions/github-script@v6
      with:
        script: |
          let release = null;

          let version = context.payload.inputs.octopi_version;

          if (version) {
            console.log(`Fetching release of ${version}`);

            const query = `query {
              repository(owner: "guysoft", name: "Octopi") {
                release(tagName:"${version}") {
                  tagName
                  releaseAssets(first:5) {
                    nodes {
                      name
                      downloadUrl
                    }
                  }
                }
              }
            }`;

            const result = await github.graphql(query);
            console.log({result});

            release = result.repository.release;

          } else {
            console.log("Fetching latest release");

            const query = `query {
              repository(owner:"guysoft", name:"OctoPi") {
                latestRelease {
                  tagName
                  releaseAssets(first:5) {
                    nodes {
                      name
                      downloadUrl
                    }
                  }
                }
              }
            }`;

            const result = await github.graphql(query);
            console.log({result});

            release = result.repository.latestRelease;
          }

          if (!release || !release.tagName || !release.releaseAssets || !release.releaseAssets.nodes) core.setFailed("Could not find OctoPi release");

          const octopiVersion = release.tagName;

          let octopiUrl = null;
          for (const asset of release.releaseAssets.nodes) {
            if (asset.name.startsWith("octopi-") && asset.name.includes("-armhf-") && asset.name.endsWith(".zip")) {
              octopiUrl = asset.downloadUrl;
              break;
            }
          }

          if (!octopiUrl) core.setFailed("Could not find OctoPi download URL");

          console.log(`OctoPi version: ${octopiVersion}`)
          console.log(`OctoPi download URL: ${octopiUrl}`)

          core.exportVariable("OCTOPI_VERSION", octopiVersion)
          core.exportVariable("OCTOPI_URL", octopiUrl)

    - name: "⬇ Download OctoPi"
      id: octopi_download
      run: |
        mkdir build
        cd build
        curl -L -o octopi.zip ${{ env.OCTOPI_URL }}

        unzip octopi.zip
        rm octopi.zip

        IMAGE=$(ls *.img | head -n 1)
        mv $IMAGE input.img

    - name: "🏗 Run CustoPiZer"
      uses: OctoPrint/CustoPiZer@main
      with:
        workspace: "${{ github.workspace }}/build"
        scripts:  "${{ github.workspace }}/scripts"
        environment: '{ "CAMERA_STREAMER_BRANCH": "${{ github.event.inputs.build_branch }}" }'

    - name: Extract binary & info
      id: extract
      run: |
        # copy binary from build
        cp build/export/camera-streamer .

        # fetch commit & export it as output
        commit=$(cat build/export/camera-streamer.commit)
        echo "camera-streamer-commit=$commit" >> "$GITHUB_OUTPUT"

        # fetch info about dependencies
        libcamera0_version=$(cat build/export/libcamera0.version)
        echo $libcamera0_version

        liblivemedia=$(cat build/export/liblivemedia.dep)
        echo $liblivemedia

        libavformat=$(cat build/export/libavformat.dep)
        echo $libavformat

        libavcodec=$(cat build/export/libavcodec.dep)
        echo $libavcodec

        libavutil=$(cat build/export/libavutil.dep)
        echo $libavutil

        libssl=$(cat build/export/libssl.dep)
        echo $libssl

        # build dependency string & export it as output
        dependencies="libcamera0 (= $libcamera0_version), $liblivemedia, $libavformat, $libavcodec, $libavutil, $libssl"
        echo "dependencies=$dependencies" >> "$GITHUB_OUTPUT"

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: camera-streamer
        path: camera-streamer
  
  package:
    name: "Package"
    needs: build
    runs-on: ubuntu-latest

    outputs:
      package-version: ${{ steps.manifest.outputs.package-version }}
      build-date: ${{ steps.manifest.outputs.build-date }}

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: camera-streamer

    - name: 🏗 Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install termux-create-package
      run: |
        export install_path="/usr/local/bin"
        sudo mkdir -p "$install_path"
        sudo curl -L 'https://github.com/termux/termux-create-package/releases/latest/download/termux-create-package' -o "$install_path/termux-create-package"
        sudo chmod 755 "$install_path/termux-create-package"

        pip install ruamel.yaml

    - name: Prepare manifest
      id: manifest
      run: |
        today=$(date +"%Y%m%d")
        echo "build-date=$today" >> $GITHUB_OUTPUT

        revision="${{ github.event.inputs.debian_revision }}"
        version="0~git$today+${{ needs.build.outputs.camera-streamer-commit }}-$revision"
        echo "package-version=$version" >> $GITHUB_OUTPUT

        cat <<EOF > manifest.yml
        control:
          Package: camera-streamer
          Version: $version
          Architecture: armhf
          Maintainer: Gina Häußge <gina@octoprint.org>
          Depends: ${{ needs.build.outputs.dependencies }}
          Homepage: https://github.com/ayufan/camera-streamer
          Description: High-performance low-latency camera streamer for Raspberry Pis
        
        installation_prefix: /usr

        data_files:
          bin/camera-streamer:
            source: camera-streamer
        EOF

    - name: Build package
      run: |
        termux-create-package manifest.yml

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: camera-streamer.deb
        path: camera-streamer_*.deb

  release:
    name: "Release"
    runs-on: ubuntu-latest

    needs: 
    - build
    - package

    outputs:
      release-assets: ${{ steps.create_release.outputs.assets }}

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: camera-streamer.deb

    - name: "📝 Prepare release"
      run: |
        RELEASE_NAME="camera-streamer ${{ needs.package.outputs.package-version }}"
        echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV

        today=${{ needs.package.outputs.build-date }}
        commit=${{ needs.build.outputs.camera-streamer-commit }}
        revision=${{ github.event.inputs.debian_revision }}
        RELEASE_TAG="$today.$commit.$revision"
        echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_ENV

        cat > release.md << EOF
        [camera-streamer](https://github.com/ayufan/camera-streamer) built from branch master.

        Commit \`$commit\` built against \`${{ needs.build.outputs.dependencies }}\`.
        EOF

    - name: "🔖 Create release & attach export"
      uses: softprops/action-gh-release@v1
      id: create_release
      with:
        name: "${{ env.RELEASE_NAME }}"
        tag_name: "${{ env.RELEASE_TAG }}"
        body_path: "release.md"
        fail_on_unmatched_files: true
        files: |
          camera-streamer*.deb
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: "Notify"
    runs-on: ubuntu-latest

    needs: release

    steps:
    - name: "♻ Prepare data"
      run: |
        cat > assets.json <<EOF
        ${{ needs.release.outputs.release-assets }}
        EOF

        URL=$(jq -r '.[0].browser_download_url' assets.json)

        echo "DEB_URL=$URL" >> $GITHUB_ENV

    - name: "📨 Notify apt repo"
      uses: peter-evans/repository-dispatch@v2
      with:
        token: ${{ secrets.REPO_DISPATCH_ACCESS }}
        repository: OctoPrint/apt.octoprint.org
        event-type: add-package
        client-payload: '{"url": "${{ env.DEB_URL }}", "dist": "bullseye", "component": "rpi"}'
